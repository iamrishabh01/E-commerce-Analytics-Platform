-- Populate date dimension (run once)
CREATE PROCEDURE retail.populate_date_dimension
    @start_date DATE = '2019-01-01',
    @end_date DATE = '2025-12-31'
AS
BEGIN
    SET NOCOUNT ON;
    
    ;WITH dates AS (
        SELECT 
            date_key = CAST(CONVERT(VARCHAR(8), @start_date, 112) AS INT),
            full_date = @start_date,
            day_of_week = DATEPART(WEEKDAY, @start_date),
            day_name = DATENAME(WEEKDAY, @start_date),
            month = MONTH(@start_date),
            month_name = DATENAME(MONTH, @start_date),
            quarter = DATEPART(QUARTER, @start_date),
            year = YEAR(@start_date),
            is_weekend = CASE WHEN DATEPART(WEEKDAY, @start_date) IN (1,7) THEN 1 ELSE 0 END
        
        UNION ALL
        
        SELECT 
            date_key = CAST(CONVERT(VARCHAR(8), DATEADD(DAY, 1, full_date), 112) AS INT),
            full_date = DATEADD(DAY, 1, full_date),
            day_of_week = DATEPART(WEEKDAY, DATEADD(DAY, 1, full_date)),
            day_name = DATENAME(WEEKDAY, DATEADD(DAY, 1, full_date)),
            month = MONTH(DATEADD(DAY, 1, full_date)),
            month_name = DATENAME(MONTH, DATEADD(DAY, 1, full_date)),
            quarter = DATEPART(QUARTER, DATEADD(DAY, 1, full_date)),
            year = YEAR(DATEADD(DAY, 1, full_date)),
            is_weekend = CASE WHEN DATEPART(WEEKDAY, DATEADD(DAY, 1, full_date)) IN (1,7) THEN 1 ELSE 0 END
        FROM dates
        WHERE full_date < @end_date
    )
    INSERT INTO retail.dim_date
    SELECT * FROM dates
    OPTION (MAXRECURSION 0);
END;
GO

-- Load product dimension (SCD Type 2 implementation)
CREATE PROCEDURE retail.upsert_dim_products
AS
BEGIN
    SET NOCOUNT ON;
    
    -- Create temporary staging table
    CREATE TABLE #staging_products (
        product_id INT,
        brand VARCHAR(50),
        category_name VARCHAR(50),
        price_range VARCHAR(20),
        avg_price DECIMAL(10,2)
    );
    
    -- Populate staging from Gold layer (via external table or PolyBase)
    INSERT INTO #staging_products
    SELECT 
        product_id,
        brand,
        category_name,
        price_range = CASE
            WHEN price < 10 THEN '0-10'
            WHEN price < 25 THEN '10-25'
            WHEN price < 50 THEN '25-50'
            WHEN price < 100 THEN '50-100'
            ELSE '100+'
        END,
        avg_price = AVG(price) OVER (PARTITION BY product_id)
    FROM 
        gold.dim_product_performance;  -- Reference to external table
    
    -- Expire old records
    UPDATE retail.dim_products
    SET 
        end_date = CAST(GETDATE() AS DATE),
        is_current = 0
    WHERE product_id IN (
        SELECT product_id FROM #staging_products
    ) AND is_current = 1;
    
    -- Insert new/changed records
    INSERT INTO retail.dim_products (
        product_id, brand, category_name, 
        price_range, avg_price, start_date
    )
    SELECT 
        s.product_id, 
        s.brand, 
        s.category_name,
        s.price_range,
        s.avg_price,
        start_date = CAST(GETDATE() AS DATE)
    FROM #staging_products s
    LEFT JOIN retail.dim_products dp 
        ON s.product_id = dp.product_id AND dp.is_current = 1
    WHERE 
        dp.product_key IS NULL OR
        s.brand <> dp.brand OR
        s.price_range <> dp.price_range;
    
    DROP TABLE #staging_products;
END;
GO

-- Load customer dimension
CREATE PROCEDURE retail.upsert_dim_customers
AS
BEGIN
    SET NOCOUNT ON;
    
    MERGE INTO retail.dim_customers AS target
    USING (
        SELECT 
            user_id,
            signup_date,
            country,
            customer_segment,
            first_purchase_date,
            last_purchase_date,
            total_spend,
            total_purchases
        FROM 
            gold.dim_customers  -- Reference to external table
    ) AS source
    ON (target.user_id = source.user_id)
    
    WHEN MATCHED AND (
        target.country <> source.country OR
        target.customer_segment <> source.customer_segment OR
        target.last_purchase_date <> source.last_purchase_date
    )
    THEN UPDATE SET
        country = source.country,
        customer_segment = source.customer_segment,
        last_purchase_date = source.last_purchase_date,
        total_spend = source.total_spend,
        total_purchases = source.total_purchases
    
    WHEN NOT MATCHED THEN INSERT (
        user_id, signup_date, country, 
        customer_segment, first_purchase_date,
        last_purchase_date, total_spend, total_purchases
    ) VALUES (
        source.user_id, source.signup_date, source.country,
        source.customer_segment, source.first_purchase_date,
        source.last_purchase_date, source.total_spend, source.total_purchases
    );
END;
GO

-- Load geography dimension
CREATE PROCEDURE retail.upsert_dim_geography
AS
BEGIN
    SET NOCOUNT ON;
    
    MERGE INTO retail.dim_geography AS target
    USING (
        SELECT DISTINCT country
        FROM gold.dim_customers
    ) AS source
    ON (target.country = source.country)
    
    WHEN NOT MATCHED THEN INSERT (country) 
    VALUES (source.country);
END;
GO

-- Load fact sales
CREATE PROCEDURE retail.load_fact_sales
    @load_date DATE = NULL
AS
BEGIN
    SET NOCOUNT ON;
    
    IF @load_date IS NULL
        SET @load_date = CAST(GETDATE() - 1 AS DATE);
    
    DECLARE @date_key INT = CAST(CONVERT(VARCHAR(8), @load_date, 112) AS INT);
    
    INSERT INTO retail.fact_sales (
        date_key, product_key, customer_key, geography_key,
        sales_amount, quantity, net_amount
    )
    SELECT 
        date_key = d.date_key,
        product_key = dp.product_key,
        customer_key = dc.customer_key,
        geography_key = dg.geography_key,
        sales_amount = fs.total_sales,
        quantity = fs.order_count,
        net_amount = fs.total_sales  -- Assuming no discounts in source
    FROM 
        gold.fact_sales fs  -- Reference to external table
    JOIN retail.dim_date d 
        ON fs.event_date = d.full_date
    JOIN retail.dim_products dp 
        ON fs.product_id = dp.product_id AND dp.is_current = 1
    JOIN retail.dim_customers dc 
        ON fs.user_id = dc.user_id
    JOIN retail.dim_geography dg 
        ON fs.country = dg.country
    WHERE 
        fs.event_date = @load_date;
END;
GO